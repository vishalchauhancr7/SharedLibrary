
@Library('OpicsDevOps')_

Date date = new Date()
String TEMP1 = date.format("yyyyMMdd")
String TEMP2 = date.format("hhmm")
String TEMP3 =TEMP1+TEMP2
def RELEASE=453
def DBTYPE='sql'
def DOC_HOSTNAME='OPICS'+RELEASE+DBTYPE
def DOCKERCOMPOSE_NAME = 'FCopics_dockerCompose'+RELEASE+'_'+TEMP3+'.yaml'
def DTR_REGISTRY='registry.misys.global.ad/fcopics/'
def IMAGE_TAG='OPICS'+RELEASE+DBTYPE+'_'+TEMP3
def IMAGE_NAME=DTR_REGISTRY+':'+IMAGE_TAG
def MS_list= ['opics-application','opics-gateway','opics-securetoken']

def IMG_list= ['application','applicationrest','gateway','securetoken']

def Linux_IMG =['frontend','backend']

def WinSer_list=['opics-windows-service','opics-pubsub','opics-commonservice']
def W_IMG_LIST=['messaging','reval','logging','pubsub','commonservice']

def IMAGE_SCRIPT_MS = 'D:\\stores\\scripts\\Images\\scripts_MicroS\\BaseImage_v1.0'
def use_flag='Nightly'
def isBuild_OK =true
def IMG_TAG=RELEASE+'_'+TEMP3

def NIGHTLY_BUILD_LOC='\\\\blrwinopfilsrv01\\OpicsBUILDS\\NightlyBuilds\\4.0.0.0_trunk'

def BUILD_FOLDER_LATEST =buildFolderLatest(NIGHTLY_BUILD_LOC)
//def BUILD_FOLDER_LATEST='4.0.0.0_trunk_Daily_201904010614'
def FS_PATH=NIGHTLY_BUILD_LOC+'\\'+BUILD_FOLDER_LATEST+'\\OPXSVR\\'


def buildFolderLatest(fs_path){

    def files=[]

    (fs_path as File).eachFile groovy.io.FileType.DIRECTORIES, {
        files << it
    }
    def result = files.sort{ a,b -> b.lastModified() <=> a.lastModified() }*.name

    def latestBuild =result[0]

    return latestBuild

}


node('BLRCSWOPICS0187'){
    dir(IMAGE_SCRIPT_MS){

        MS_list.eachWithIndex{
            var ->
                stage('Building  : '+var){

                    bat 'D:\\stores\\draft_pack_script\\delete_draftFiles.bat '+FS_PATH

                    bat 'draft create --pack '+var+' '+FS_PATH

                    draft_DockerBuild(var,FS_PATH,IMG_TAG)


                }

        }

        WinSer_list.eachWithIndex{
            var ->
                stage('Building  : '+var){

                    bat 'D:\\stores\\draft_pack_script\\delete_draftFiles.bat '+FS_PATH

                    bat 'draft create --pack '+var+' '+FS_PATH

                    draft_DockerBuild_winServices(var,FS_PATH,IMG_TAG)

                }

        }

    }

}
node('BLRCSLOPICS0012.misys.global.ad'){
    dir('/localdisk/GIT_WA/opicsdraft/opics-product'){
        stage('Building : Opics Backend'){

            Checkout_linux('opics-product')
            docker_build_linux('opics-product')
        }
    }
    dir('/localdisk/GIT_WA/opicsdraft/opics-product-ui'){
        stage('Building : opics Frontend'){
		
            Checkout_linux('opics-product-ui')
            docker_build_linux('opics-product-ui')
        }
    }

    stage('Container Structure Test'){
        Linux_IMG.eachWithIndex {
            var ->
                sh 'container-structure-test test --image '+DTR_REGISTRY+var+' --config /home/micloud/cst/'+var+'/'+var+'_test.yaml'
        }
    }

}
node('BLRCSWOPICS0187'){
    dir(IMAGE_SCRIPT_MS){

        stage('AquaScan:'){
            IMG_list.eachWithIndex{
                var ->

                    def TAG_Img=var+':'+IMG_TAG
                    echo 'Tag :'+TAG_Img
                    Aqua_scan('MS',TAG_Img)

            }

        }
        stage('Pushing'){

            IMG_list.eachWithIndex{
                var ->
                    bat 'docker login -u opicscmre -p Earth@2012 registry.misys.global.ad'
                    bat 'docker push '+DTR_REGISTRY+var+':'+IMG_TAG
                    
            }
            W_IMG_LIST.eachWithIndex{
                var ->
                    bat 'docker login -u opicscmre -p Earth@2012 registry.misys.global.ad'
                    bat 'docker push '+DTR_REGISTRY+var+':'+IMG_TAG
                
            }

        }


    }

}
node('BLRCSLOPICS0012.misys.global.ad'){
    dir('/localdisk/GIT_WA/opicsdraft/opics-product'){
        stage('Push Linux Images'){
            Linux_IMG.eachWithIndex{
                var ->

                    sh 'docker login -u opicscmre -p Earth@2012 registry.misys.global.ad'
                    sh 'docker push '+DTR_REGISTRY+var
            }
        }
    }
}



node('BLRCSWOPICS0077'){
    stage('Generating Docker compose'){

        bat 'python \\\\blrwinopfilsrv01\\Opics_Buildtools\\GitBuildConfig\\Rel4.x\\email_docker.py  --Image_Name ' +IMAGE_NAME+' --Docker_hostname '+DOC_HOSTNAME+' --Release '+RELEASE+' --DCFILE '+DOCKERCOMPOSE_NAME+' --build_flag '+use_flag+' --Tag_timestamp '+TEMP3
        

    }

}

def copy_compose(comp_name){

    bat 'copy \\\\blrwinopfilsrv01\\OpicsBUILDS\\Docker\\4.5.0.0\\DOCKER_COMPOSE_MS\\'+comp_name+'  D:\\stores\\DOCKER_COMPOSE'


}
def services(){

    sleep(time:3,unit:"MINUTES")
    bat 'D:\\stores\\curl -k  https://blrcswopics0111:8443/SecureTokenServiceV4.0/STS.svc'
    bat 'D:\\stores\\curl -k https://blrcswopics0111:8441/ApplicationServiceV4.0/MBRE.svc'
    bat 'D:\\stores\\curl -k https://blrcswopics0111:8442/ApplicationServiceRestV4.0/help'


}

node('BLRCSWOPICS0111'){
    stage('Run Opics Services'){
        copy_compose(DOCKERCOMPOSE_NAME)
        bat 'docker-compose -f D:\\stores\\DOCKER_COMPOSE\\'+DOCKERCOMPOSE_NAME+' down'
        bat 'docker-compose -f D:\\stores\\DOCKER_COMPOSE\\'+DOCKERCOMPOSE_NAME+' up -d'

    }

    stage('Test Services'){

        //services()
        bat 'ping localhost -n 10'
    }


    stage('DDT Execution'){

        try{
            bat 'del D:\\temp\\OPX45\\opicsddt\\output\\*.trx /s /f /q'
            bat 'docker run -v D:/Temp/OPX45:C:/OPX45 -t  registry.misys.global.ad/fcopics/opicsddt:20192101 C:/OPX45/opicsddt/RunUnitTest.cmd'

        }catch(e){
            isBuild_OK =false
            echo e.toString()
        }

    }


}

node('BLRCSWOPICS0111'){
	dir('D:\\stores\\GIT_WA\\opicsddt\\'){
		echo 'Updating DDT WorkArea'
		Checkout('master','opicsddt')
		bat 'if not exist "D:\\stores\\GIT_WA\\opicsddt\\OUTPUT" mkdir "D:\\stores\\GIT_WA\\opicsddt\\OUTPUT"'
		bat 'copy D:\\temp\\OPX45\\opicsddt\\output\\*.trx D:\\stores\\GIT_WA\\opicsddt\\OUTPUT'
	
	//stage('Publishing MSTest Result'){
        
    //    step([$class: 'MSTestPublisher', testResultsFile: 'OUTPUT/*.trx'])
        
    //}
}

}




